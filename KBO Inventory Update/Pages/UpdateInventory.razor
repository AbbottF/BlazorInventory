@page "/update-inventory"
@inject NavigationManager NavigationManager
@inject Data.KboInventoryTicketsService kboInventoryTicketsService
@using KBO_Inventory_Update.Models

<div class="column-layout update-inventory-container">
    <div class="row-layout group">
        <IgbButton @onclick="UpdateInventoryOnServer" class="button" update-inventory-scope>
            <span class="material-icons">
                import_contacts
            </span>
            <span>Update Inventory</span>
            <IgbRipple></IgbRipple>
        </IgbButton>
        <IgbSwitch class="new_arrivals_switch" update-inventory-scope @ref="resetNewArrivals">
            Reset New Arrivals
        </IgbSwitch>
    </div>
    <div class="column-layout group_1">
        <IgbGrid Name="iGrid" @ref="iGrid" Data="updateInventoryTable" PrimaryKey="ISBN" DisplayDensity="DisplayDensity.Cosy" AutoGenerate="false" class="ig-typography grid" update-inventory-scope>
            <IgbColumn Field="ISBN" DataType="GridColumnDataType.String" Header="ISBN" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Title" DataType="GridColumnDataType.String" Header="Title" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Author" DataType="GridColumnDataType.String" Header="Author" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Publisher" DataType="GridColumnDataType.String" Header="Publisher" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Category" DataType="GridColumnDataType.String" Header="Category" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Subject" DataType="GridColumnDataType.String" Header="Subject" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Binding" DataType="GridColumnDataType.String" Header="Binding" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="List$USD" DataType="GridColumnDataType.Number" Header="List$USD" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Net$USD" DataType="GridColumnDataType.Number" Header="Net$USD" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="AvaliableQuantity" DataType="GridColumnDataType.Number" Header="AvaliableQuantity" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Blowout" DataType="GridColumnDataType.String" Header="Blowout" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Category2" DataType="GridColumnDataType.String" Header="Category2" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Category3" DataType="GridColumnDataType.String" Header="Category3" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Subject2" DataType="GridColumnDataType.String" Header="Subject2" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Subject3" DataType="GridColumnDataType.String" Header="Subject3" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="Age" DataType="GridColumnDataType.String" Header="Age" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="CalendarEvent" DataType="GridColumnDataType.String" Header="CalendarEvent" Filterable="false" Selectable="false"></IgbColumn>
            <IgbColumn Field="JsonData" DataType="GridColumnDataType.String" Header="JsonData" Filterable="false" Selectable="false" Hidden="true"></IgbColumn>
        </IgbGrid>
    </div>
</div>

@code {
    private IgbGrid? iGrid;
    private IgniteUI.Blazor.Controls.IgbSwitch? resetNewArrivals;
    private KboInventoryTicket[] updateInventoryTable = Array.Empty<KboInventoryTicket>();

    protected override async Task OnInitializedAsync()
    {
        updateInventoryTable = await this.kboInventoryTicketsService.GetTable1() ?? updateInventoryTable;
    }
    private void Navigate(string path)
    {
        NavigationManager.NavigateTo(path);
    }

    public void UpdateInventoryOnServer(EventArgs e)
    {
        if (this.resetNewArrivals.Checked)
        {
            // Call Clear new arrivals api
        }
        iGrid.SelectAllRows(false);
        if (iGrid.SelectedRows.Count() == 0)
        {
            // we have a problem ... we shouldn't be here
        }
        do
        {
            var firstRow = iGrid.GetRowByIndex(0);
            UpdateInventoryItem(firstRow);
            if (UpdateInventoryItem(firstRow))
            {
                iGrid.DeleteRow(firstRow);
                iGrid.SelectAllRows(false);
            }
            else
            {
                break;
            }
        } while (iGrid.SelectedRows.Count() != 0);
        if (iGrid.SelectedRows.Count() != 0)
        {
            // we have a problem ... we have to message to restart
        }
    }

    internal bool UpdateInventoryItem(IgbRowType ticketRow)
    {
        return true;
    }

}
